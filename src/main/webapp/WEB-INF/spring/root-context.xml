<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">


	<!-- 
		* root-context.xml : 서버 구동과 함께 web.xml 파일을 거쳐서 바로 읽혀지는 파일
							=> 서버 구동과 동시에 바로 빈으로 설정해야 되는 내용 작성
							   DB연결 / 트랜잭션 처리 / 내, 외부 모듈 연동 등
	 -->
	 <bean class="org.apache.commons.dbcp.BasicDataSource" id ="dataSource" destroy-method="close">
	 	<property name="driverClassName" value= "oracle.jdbc.driver.OracleDriver"/>
	 	<property name="url" value="jdbc:oracle:thin:@172.30.1.12:1521:xe"/>
	 	<property name="username" value="c##spring"/>
	 	<property name="password" value="spring"/>
	 </bean>
	 
	 <!-- * 참고 * 위의 설정이 아래와 같은 코드로 동작될 것임!
	 	BasicDataSource dataSource = new BasicDataSource();
	 	
	 	dataSource.setDriverClassName("oracle.jdbc.driver.OracleDriver");
	 	dataSource.setUrl("jdbc:oracle:thin:@localhost:1521:xe");
	 	dataSource.setUserName("C##spring");
	 	dataSource.setPassword("spring");
	  -->
	 <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
	 	<property name="configLocation" value="classpath:mybatis-config.xml"/>
	 	<property name="dataSource" ref="dataSource"/>
	 </bean>
	 
	 <!-- * 참고 *
	 	SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
	 	sqlSessionFactory.setConfigLocation("calsspath:mybatis-config.xml");
	 	sqlSessionFactory.setDataSource(dataSource);	
	  -->
	 
	 <bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
	 	<constructor-arg ref="sqlSessionFactory"/>
	 </bean>
	 <!-- * 참고 * 
	 	SqlSessionTemplate sqlSession = new SqlSessionTemplate(sqlSessionFactory);
	  -->
	  
	  <!-- 
	  	 property : setter를 통한 주입
	  	 * constructor-arg : 생성자를 통한 주입
	   -->
	<!--  파일 업로드 관련 빈 등록 -->
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<property name="maxUploadSize" value="100000000"></property>
		<property name="maxInMemorySize" value="100000000"></property>
	</bean>
	<!-- 
	<context:property-placeholder location="classpath:/db-config/email.properties" />
	 -->
   <!-- 이메일 인증 관련 빈 등록 -->
   <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
      <property name="host" value="smtp.gmail.com" />
      <property name="port" value="587" />
      <property name="username" value="twwt0912@gmail.com" />
      <property name="password" value="qysnspdliimtcibp" />
      <property name="javaMailProperties">
         <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <!-- gmail의 경우 보안문제 업데이트로 인해 SSLSocketFactory를 추가해야 smtp 사용 가능. -->
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
                <prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
				<prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
            </props>
      </property>
      
   </bean>
	
	<!-- AOP 관련 설정 -->
	<!-- @Aspect, 하위 어노테이션 활성화 -->
	<aop:aspectj-autoproxy />
	
	<!-- @Aspect를 스캔하기 위한 설정 -->
	<context:component-scan base-package="com.kh.spring" use-default-filters="false">
		<context:include-filter type ="annotation" expression="org.aspectj.lang.annotation.Aspect"/>
	</context:component-scan>

</beans>